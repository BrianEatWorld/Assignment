Used Pip to install tornado and git
Created folder and git repo for assignment
Because I will only be using the Semantic UI docs, created a submodule in the project for the gh-pages branch of the Semantic UI repo within my repo's folder
Ran through Tornado HelloWorld
Ran into issues with pathing when trying to locate Tornado script outside of content directory
Fixed issue by moving script and then set up hadnlers for the static files. Tornado has a built in static file handler, but use looks like it would require altering the SemanticUI directory structure (put everything in a "static" folder
Revisited the static issue and tried just setting static path to the main "./" directory. Everything works.
Statics declared in the settings seemed to stop working, so I switched back to handling them explicitly
RegEx was causing the majority of the routing problems. Entire site is now functional. FF does not show a favicon, but Tornado isn't returning errors and the favicon is explicitly declared.
Committing and moving on to Selenium, will return to fine tune if needed.
Issues with committing. Wasn't sure about committing the submodule with basic.py inside. Couldn't get a definitive answer on whether it would affect the master upstream. Made a quick change to basic.py and relocated it to my Assignment directory where its no porblem.
One change to make to basic.py is to rewrite us os.path joins exclusively, rather than the current mix.
While working on Selenium, noted that there are three different ways to locate elements with selenium. 
Installed nosetests and have it running with basic selenium script (opens Google and checks page title for "Google").
Started writing tests by hand, building off the basic script previously mentioned. Realized it might be faster to record them using the IDE and then generate the tests automatically.
Automatic generation keeps failing due to invisible elements. However, the elements look to be visible and can be clicked. Switching back to manual creation.
Created manual test that covers the MainContentHandler.
Added a javascript editor to break a link handled by MainContentHandler. The test then checks to see that the error is properly handled and sent toa  pretty 404 page.
Moved testTest and tornado subprocess out of setup.py and in testMain.py.
Tried running concurrent nosetests, but Tornado process generates a socket error. Need to find a way to have multiple instances of Tornado before it will work.
testSubMain is very similar to testMain, it just adds in the subdirectory component.
testCatchAll is also pretty basic. The one potential issue is that it actuyally tests more than just catchAll. It ends up testing the 404 code for subMain and Main as well, but its seemed more thorough to do it this way. 
testStatic is turning out to be fairly complex. The question is whether to test the static items in the same was as the subMain and Main, where the test looks to see if something exists. However, it seems the more thorough route would be to test that the items are also rendering properly on the page. Similarly, testing the download may cause problems due to behavior differences between FF and Chrome, as Chrome has no popup to use with checkForALert.
Another way to test the static files might be the captureNetworkTraffic method. However, it looks like this may have limited support.
Ran into issues with testSubMain, where is can't see the element I need to click. Went back to work on setup.py while thinking it over.
Issues with setup.py are caused by my lack of __init__.py in the package directories.
Setting up the packages meant moving the directory controlled by the submodule. THis caused problems with git. The submodule was removed and then recreated int he new directory.
The folders for packaging also seemed to break the testing scripts. Running the tornado server separately from the tests worked fine, but running the server as a subprocess was causing all the static files to 404. The issue seemed to be related to the fact that running the server directly means that python is ina  different directory than when running the subprocess for the tests. Adding the __file__ path to the paths for the staticFileHandler seemed to fix the problem.
Fixed the problem with the final test, subMain. I misdiagnosed the issue earlier, thinking it was a shortcoming in Selenium, caused by page height. It turns out it was because the Selenium call before it was failing. I made the mistake of trying to use xpath. Switching to CSS selectors solvede the problem and now 100% of the handlers are covered by tests.
The next step is to try to expand on the staticHandler tests, to account for rendering issues.
Initial attempts at setup.py were problemetic. I believe it has been fixed now by explicitly outlining package_data. "python setup.py nosetests" now runs through the tests as expected.
Expanding on the current program, I think it is more important to increase the test feature set. I am going to try integrating phantomJS. This will be added as a submodule, since it isn't a Python package, but it can be driven by Selenium. It does mean the path will have to be specified from within the tests.
Some experimentation and PhantomJS doesn't seem like its going to work in time. Going to swap to ghosts.py.
Couldn't get ghosts.py to work properly. The driver initializes, opens the browser, but faisl to navigate to the given url.
{received comments}
{basic.py declared global variables} moved variables to the __main__ block which then calls main(), which accepts two variables: the directory for the site and the port it will run on. None of the test scripts used globals.
{use PEP8 variable names) swapped variable names in basic.py and tests to names with _ and not camel case.
{use join or format instead of + for string concart} basic.py was the only code with concats, switched to ''.join([]) style. None of the text seemed to fit the formatting use case.
{DRY out the code} Eliminated a good deal of repeition. Established http_error and working_directory variables to cover commonly used paths. The five staticHandlers are still explicitly written becaause alternative methods still fail. 
{Don't use relative pathing}Fixed relative pathing in basic.py, but some still needs to be addressed in the subprocess calls in the tests. Those calls are why tests fail unless called from the root directory.
{logging call doesn't belong in module} Moved logging config to __main__
{remove half written lines and commented remnants} Removed
{restructure testStatic alert check} Dropped the excess variable ("alert") and catch the specific exception for which the test should be looking
Other bugs fixed include switching the way settings are established in TOrnado script, original method was failing silently. Made Handlers more Pythonic by dropping the explicit paths in favor of a try/except framework that will render and found pages and then render 404 if nothing is in directory. Changed the 404 errors so that instead of raising the error, the 404 page is displayed and the status is set to 404.
{swap PyTest for Nose} Changed the import and setup.py to accomdate PyTest. This change also involved renaming the tests. THe previous file names did not actually meet the proper rules for test discovery.

To Do: {convert remaing relative paths, look into entry points, meet other PEP8 standards, look into Tornado package tests, find a better way to handle/explicitly catch errors where tornado has trouble starting in the test scripts}


